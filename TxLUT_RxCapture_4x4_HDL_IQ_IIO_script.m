IPAddr = 'ip:192.168.1.101';


%% AXI4 Stream IIO Write registers
% NOTE: This is a place holder based on auto-generated templates. Please modify these values according to your FPGA design
AXI4SReadObj = pspshared.libiio.axistream.read(...
                  'IPAddress',IPAddr,...
                  'SamplesPerFrame',1024,...
                  'DataType','ufix128',...
                  'Timeout',0.1);
setup(AXI4SReadObj);

AXI4SWriteObj = pspshared.libiio.axistream.write(...
                  'IPAddress',IPAddr,...
                  'SamplesPerFrame',1024,...                  
                  'Timeout',0.1);
setup(AXI4SWriteObj,fi(zeros(1024,1),numerictype('ufix128')));


%% AXI4 MM IIO Write registers
rx_capture_trig =  pspshared.libiio.aximm.write(...
                   'IPAddress',IPAddr,...
                   'AddressOffset',hex2dec('100')); 
rx_frame_size =  pspshared.libiio.aximm.write(...
                   'IPAddress',IPAddr,...
                   'AddressOffset',hex2dec('104')); 
rx_stream_en =  pspshared.libiio.aximm.write(...
                   'IPAddress',IPAddr,...
                   'AddressOffset',hex2dec('108')); 
rx_auto_trig_freq =  pspshared.libiio.aximm.write(...
                   'IPAddress',IPAddr,...
                   'AddressOffset',hex2dec('10C')); 
rx_auto_trig_en =  pspshared.libiio.aximm.write(...
                   'IPAddress',IPAddr,...
                   'AddressOffset',hex2dec('110')); 
rx_src_select =  pspshared.libiio.aximm.write(...
                   'IPAddress',IPAddr,...
                   'AddressOffset',hex2dec('114')); 
tx_lut_wr_length =  pspshared.libiio.aximm.write(...
                   'IPAddress',IPAddr,...
                   'AddressOffset',hex2dec('118')); 
tx_lut_wr_reset =  pspshared.libiio.aximm.write(...
                   'IPAddress',IPAddr,...
                   'AddressOffset',hex2dec('11C')); 
tx_lut_wr_ch_select_mask =  pspshared.libiio.aximm.write(...
                   'IPAddress',IPAddr,...
                   'AddressOffset',hex2dec('120')); 
tx_lut_ch_enable_mask =  pspshared.libiio.aximm.write(...
                   'IPAddress',IPAddr,...
                   'AddressOffset',hex2dec('124')); 


%% AXI4 MM IIO Read registers
FIFO_BackPressure_Count = pspshared.libiio.aximm.read(...
                 'IPAddress',IPAddr,...
                 'AddressOffset',hex2dec('134'),...
                 'DataType','uint32');


%% Setup() AXI4 MM IIO Objects
% NOTE: These are placeholder values. Please update this section according to your design

% Setup AXI4MM Read IIO objects
setup(FIFO_BackPressure_Count); 
% Setup AXI4MM Write IIO objects
setup(rx_capture_trig,boolean(0)); 
setup(rx_frame_size,uint32(0)); 
setup(rx_stream_en,boolean(0)); 
setup(rx_auto_trig_freq,uint32(0)); 
setup(rx_auto_trig_en,boolean(0)); 
setup(rx_src_select,fi(0,numerictype('ufix1'))); 
setup(tx_lut_wr_length,uint32(0)); 
setup(tx_lut_wr_reset,boolean(0)); 
setup(tx_lut_wr_ch_select_mask,uint32(0)); 
setup(tx_lut_ch_enable_mask,uint32(0)); 


%% Step() AXI4 MM IIO Objects
% NOTE: These are placeholder values. Please update this section according to your design

% ---- Step AXI4MM Read IIO objects ---- 
% step(FIFO_BackPressure_Count); 
% ---- Step AXI4MM Write IIO objects ---- 
% step(rx_capture_trig,boolean(0)); 
% step(rx_frame_size,uint32(0)); 
% step(rx_stream_en,boolean(0)); 
% step(rx_auto_trig_freq,uint32(0)); 
% step(rx_auto_trig_en,boolean(0)); 
% step(rx_src_select,fi(0,numerictype('ufix1'))); 
% step(tx_lut_wr_length,uint32(0)); 
% step(tx_lut_wr_reset,boolean(0)); 
% step(tx_lut_wr_ch_select_mask,uint32(0)); 
% step(tx_lut_ch_enable_mask,uint32(0)); 
